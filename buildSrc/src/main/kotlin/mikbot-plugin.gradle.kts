import dev.schlaubi.mikbot.plugins.gradle.publishing.MakeRepositoryIndexTask
import dev.schlaubi.mikbot.plugins.gradle.publishing.PluginExtension
import dev.schlaubi.mikbot.plugins.gradle.publishing.pluginExtensionName
import java.nio.file.Files
import java.nio.file.Path

plugins {
    id("com.google.devtools.ksp") // used for plugin-processor
    kotlin("jvm")
    //kotlin("kapt") // used for pf4j processor (currently self-made with ksp)
}

extensions.create<PluginExtension>(pluginExtensionName)

// There might be a better way of doing this, but for now I can't be bothered figuring it out
val pluginMainFile: Path = buildDir
    .resolve("generated")
    .resolve("ksp")
    .resolve("main")
    .resolve("resources")
    .resolve("META-INF")
    .resolve("MANIFEST.MF")
    .toPath()

val plugin: Configuration by configurations.creating
val optionalPlugin: Configuration by configurations.creating

configurations {
    compileOnly {
        extendsFrom(plugin)
        extendsFrom(optionalPlugin)
    }
}

dependencies {
    compileOnly(kotlin("stdlib-jdk8")) // this one is included in the bot itself
    compileOnly(project(":api"))
    ksp(project(":plugin-processor"))
}

tasks {
    // Taken from: https://github.com/twatzl/pf4j-kotlin-demo/blob/master/plugins/build.gradle.kts#L20-L35
    val archive = register<Jar>("assemblePlugin") {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        dependsOn(jar)

        destinationDirectory.set(buildDir.resolve("plugin"))
        archiveBaseName.set("plugin-${project.name}")

        // first taking the classes generated by the jar task
        into("classes") {
            with(jar.get())
        }

        // and then we also need to include any libraries that are needed by the plugin
        dependsOn(configurations.runtimeClasspath)
        into("lib") {
            from({
                val mainConfiguration = project(":").configurations["runtimeClasspath"].files.map { it.removeVersion() }

                // filter out dupe dependencies
                configurations.runtimeClasspath.get().files.filter {
                    it.removeVersion() !in mainConfiguration
                }
            })
        }
        archiveExtension.set("zip")
    }

    afterEvaluate {
        jar {
            doLast {
                val mainClass = Files.readString(pluginMainFile)
                    .substringAfter("Plugin-Class: ")
                    .substringBefore(System.lineSeparator())
                val extension = project.extensions.getByName<PluginExtension>(pluginExtensionName)
                manifest {
                    attributes["Plugin-Class"] = mainClass
                    attributes["Plugin-Id"] = project.name
                    attributes["Plugin-Version"] = (project.version as String)
                    extension.requires.orNull?.let { requires ->
                        attributes["Plugin-Requires"] = requires
                    }
                    buildDependenciesString().takeIf { it.isNotBlank() }?.let { dependencies ->
                        attributes["Plugin-Dependencies"] = dependencies
                    }

                    attributes["Plugin-Description"] = extension.description.getOrElse("<no description>")
                    attributes["Plugin-Provider"] = extension.provider.getOrElse("MikBot Contributors")
                    attributes["Plugin-License"] = extension.license.getOrElse("Apache 2.0")
                }
            }
        }
    }

    val repository = rootProject.file("ci-repo").toPath()

    val buildRepository = task<MakeRepositoryIndexTask>("buildRepository") {
        targetDirectory.set(repository)
        repositoryUrl.set("https://plugin-repository.mikbot.schlaubi.net")
    }

    afterEvaluate {
        task<Copy>("copyFilesIntoRepo") {
            dependsOn(buildRepository)
            from(archive)
            include("*.zip")
            // providing version manually, as of weird evaluation errors
            into(repository.resolve("${project.name}/$version"))
        }
    }
}

fun buildDependenciesString(): String {
    val required = plugin.allDependencies.map { it.toDependencyString() }
    val optional = optionalPlugin.allDependencies.map { it.toDependencyString(true) }

    return (required + optional).joinToString(", ")
}

fun Dependency.toDependencyString(optional: Boolean = false): String {
    val name = if (this is ProjectDependency) {
        dependencyProject.name
    } else {
        name
    }

    return "$name${if (optional) "?" else ""}@$version"
}

fun File.removeVersion() = name.takeWhile { !it.isDigit() }
